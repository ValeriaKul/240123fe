// Асихнронный код - это тот код, которому требуется n-ое количество времени на выполнение

// setTimeout() - функция, которая формирует указанную задержку в МС для указанного блока кода

// ------------------------
// Пример работы асихнронного кода

// setTimeout(() => {
//     console.log(1)
// },1000)

// console.log(2)

// console.log(3)

// 231

// --------------------------
// Пример 2

// function func1(){
//     setTimeout(() => {
//         console.log(1)
//     },1000)
// }

// function func2(){
//     console.log(2)
// }

// function func3(){
//     console.log(3)
// }

// func1()
// func2()
// func3()

// 213

// -----------------------------------------
// Пример 3
// Порядок выполнения команд не предсказуемый

// setTimeout(() => {
//     console.log(1)
// }, Math.random() * 100)

// setTimeout(() => {
//     console.log(2)   
// }, Math.random() * 100)     

// Решение - вложенность 

// setTimeout(() => {
//     console.log(1)
//     setTimeout(() => {
//         console.log(2)   
//     }, Math.random() * 100)  
// }, Math.random() * 100)



// -------------------------------------------
// Promise 
// Специлаьный объект, позволяющий удобно работать с асинхрронным кодом
// Промис хранит 2 состояния (resolve, reject). Спустя какое-то время промис переходит в одно из этих состояний

let promise = new Promise((resolve, reject) => {
    setTimeout(() => {
        console.log(1)
        resolve()
    }, Math.random() * 100)
})

// Метод then - позволяет выполнить далее указанный код в колбеке только после того, как промис перейдет 
// в состояние resolve

promise.then(() =>{
    console.log(2)
})




